//
//  ConnectTodayView.swift
//  MomentsShare
//
//  Created by Daol on 2023/08/29.
//

import SwiftUI
import URLImage // Add this line
import FirebaseFirestore // Add this line at the top

struct ConnectTodayView: View {
    @State private var tabSelection = 1
    @EnvironmentObject var imageLoader: ImageLoader

    
    var body: some View {
        VStack(spacing: 35) {
            ScrollView {
                VStack {
                    // 1번째줄
                    HStack(spacing: 17) {
                        // 갤러리 1
                        VStack { 
                            ZStack {
                                if let url = URL(string: imageLoader.imageUrlString ?? "") { // Replace 'imageUrlString' with your actual image url string
                                    URLImage(url) { image in
                                        image.resizable()
                                    }
                                    .frame(width: 159, height: 159)
                                    .cornerRadius(21)

                                    
                                    Rectangle()
                                      .foregroundColor(.clear)
                                      .frame(width: 159, height: 159)
                                      .background(Color(red: 0.85, green: 0.85, blue: 0.85).opacity(0.3))
                                      .cornerRadius(21)
                                    
                                    Image("profile")
                                        .resizable()
                                        .frame(width: 47, height: 47)
                                        .shadow(color: .black.opacity(0.25), radius: 1, x: 0, y: 2)
                                        .padding(.leading,50)
                                        .padding(.top,50)
                                    
                                    Image("Mask group")
                                        .resizable()
                                        .frame(width: 47, height: 47)
                                        .shadow(color: .black.opacity(0.25), radius: 1, x: 0, y: 2)
                                        .padding(.leading,90)
                                        .padding(.top,90)
                                    
                                    
                                } else {
                                    Rectangle()
                                      .frame(width: 159, height: 159)
                                      .foregroundColor(Color(red: 0.52, green: 0.69, blue: 0.94).opacity(0.8))
                                      .cornerRadius(21)
                                
                                    Image("whitechain")
                                        .resizable()
                                        .frame(width: 92,height: 92)
                                    
                                    Image("profile")
                                        .resizable()
                                        .frame(width: 47, height: 47)
                                        .shadow(color: .black.opacity(0.25), radius: 1, x: 0, y: 2)
                                        .padding(.trailing,70)
                                        .padding(.top,70)
                                    
                                    Image("Mask group")
                                        .resizable()
                                        .frame(width: 47, height: 47)
                                        .shadow(color: .black.opacity(0.25), radius: 1, x: 0, y: 2)
                                        .padding(.leading,70)
                                        .padding(.bottom,70)
                                }
                            }
                                
                          
                            
                            Text("# 운동 # 일상")
                                .font(.system(size: 17))
                                .fontWeight(.bold)
                                .foregroundColor(Color(red: 0.33, green: 0.53, blue: 0.84))
                                .frame(width: 111, height: 41)
                        }
                        // 갤러리 2
                        VStack {
                            Image("non")
                                .resizable()
                                .frame(width: 159, height: 159)
                            
                            Text("서로의 추억을 만들어보세요!")
                                .font(.system(size: 17))
                                .fontWeight(.bold)
                                .foregroundColor(Color.black)
                                .frame(width: 111, height: 41)
                        }
                    }
                    // 2번째줄
                    HStack(spacing: 17) {
                        // 갤러리 1
                        VStack {
                            Image("non")
                                .resizable()
                                .frame(width: 159, height: 159)
                            
                            Text("서로의 추억을 만들어보세요!")
                                .font(.system(size: 17))
                                .fontWeight(.bold)
                                .foregroundColor(Color.black)
                                .frame(width: 111, height: 41)
                        }
                        // 갤러리 2
                        VStack {
                            Image("non")
                                .resizable()
                                .frame(width: 159, height: 159)
                            
                            Text("서로의 추억을 만들어보세요!")
                                .font(.system(size: 17))
                                .fontWeight(.bold)
                                .foregroundColor(Color.black)
                                .frame(width: 111, height: 41)
                        }
                        
                        
                        
                        
                    }
                    
                }
                
            }
        }.onAppear() {
            self.imageLoader.loadImageUrl()
        }
    }
}

class ImageLoader : ObservableObject {
    @Published var imageUrlString : String?
    
    func loadImageUrl() {
        let db = Firestore.firestore()

        db.collection("users").document("<YourUserID>")
          .addSnapshotListener { documentSnapshot, error in
              guard let document = documentSnapshot else {
                  print("Error fetching documents: \(error!)")
                  return
              }
              guard let data = document.data() else { return }

              if data["status"] as? String == "accepted" &&
                 data["from"] as? String == "<TargetUserID>" {

                  // Fetch the image url using the image id from the accepted request.
                  if let imageId = data["imageId"] as? String {
                      db.collection("images").document(imageId).getDocument { (docSnapshot, error) in
                          if let docSnapshot = docSnapshot,
                             let imageData = docSnapshot.data(),
                             let imageUrlString = imageData["url"] as? String {

                              self.imageUrlString = imageUrlString

                          } else if let error = error{
                              print("Error fetching image url", error)
                          }
                      }
                  } else {
                      print("Image ID is nil")
                  }
              }
              
          }
    }
    
    func sendRequest(imageId: String) {
           let db = Firestore.firestore()
           // Assuming 'users' collection and 'requests' document exists
           db.collection("users").document("requests").setData([
               "from": "<YourUserID>",
               "to": "<TargetUserID>",
               "imageId": imageId,
               "status": "pending"
           ]) { err in
               if let err = err {
                   print("Error writing document: \(err)")
               } else {
                   print("Document successfully written!")
               }
           }
       }
    
}

struct ConnectTodayView_Previews: PreviewProvider {
    static var previews: some View {
        ConnectTodayView().environmentObject(ImageLoader())
    }
}
